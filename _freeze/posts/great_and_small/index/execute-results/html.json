{
  "hash": "f55196f5ce7a46dcab1d85538a7e24e4",
  "result": {
    "markdown": "---\ntitle: \"All Samples Great and Small\"\ncode-fold: false\nauthor:\n  - name: Jack Bailey\n    # url: https://example.com/norajones\n    # affiliation: Spacely Sprockets\n    # affiliation-url: https://example.com/spacelysprokets\ndate: \"2023-08-011\"\n# date-modified: \"5/23/2021\"\ndescription: |\n  Some Notes on the Connection Between Macro and Micro Models\nfreeze: true\nexecute: \n  echo: false\ncategories: [Statistics]\ndraft: false\n# image: shannon.jpg\n---\n\n\nWe often split analysis into macro and micro. This is probably way of us to make sense of our data. I kind of conceptual tool to help us make sense of our data but in reality, the distinction between the two is less clear cut in this post I\\'m gonna go over some of the links between micro and macro modelsfor some people, they may seem obvious, but this is stuff that I was never taught and had to work out myself so hopefully it will save someone else the hassle.\n\n## Proof by Simulation\n\nFirst, we'll use `tidyverse` to simulate some data. Next, we'll then use `brms` to fit our models. Then, we'll use `modelsummary` to check that they're doing what we expect.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\n\nlibrary(tidyverse)\nlibrary(brms)\nlibrary(modelsummary)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set simulation parameters\n\nn <- 100\nt <- 100\na <- 0\nb <- 1\n\n\n# Create tibble of voters\n\nbern_dta <- \n  expand_grid(\n    time = 1:t,\n    voter = 1:n\n  )\n\n\n# Simulate GDP data and varying intercept for each time point\n\nbern_dta <- \n  bern_dta |> \n  group_by(time) |> \n  mutate(\n    gdp = rnorm(1, 0, 1),\n    a_t = rnorm(1, 0, 0.1)\n    ) |> \n  ungroup()\n\n\n# Create inverse logit function to convert logits to probabilities\n\ninv_logit <- function(x){\n  p <- 1/(1 + exp(-x))\n  p <- ifelse(x == Inf, 1, p)\n  p\n}\n\n\n# Simulate vote choice\n\nbern_dta <- \n  bern_dta |> \n  mutate(\n    vote = \n      rbinom(\n        n = n*t,\n        size = 1,\n        prob = jbmisc::inv_logit(a + a_t + b * gdp)\n      )\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create bernoulli, binomial, and beta versions of the data\n\nbinom_dta <- \n  bern_dta |> \n  group_by(time) |> \n  summarise(\n    trials = n(),\n    success = sum(vote),\n    gdp = unique(gdp)\n  )\n\nbeta_dta <- \n  bern_dta |> \n  group_by(time) |> \n  summarise(\n    vote = mean(vote),\n    gdp = unique(gdp)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit model to Bernoulli data\n\nbern_mod <- \n  brm(\n    formula = vote ~ 1 + gdp + (1 | time),\n    family = bernoulli(link = \"logit\"),\n    prior = \n      prior(normal(0, 1.5), class = \"Intercept\") +\n      prior(normal(0, 0.5), class = \"b\") +\n      prior(exponential(2), class = \"sd\"),\n    data = bern_dta,\n    cores = 2,\n    chains = 2\n  )\n\n\n# Fit model to binomial data\n\nbinom_mod <- \n  brm(\n    formula = success | trials(trials) ~ 1 + gdp + (1 | time),\n    family = binomial(link = \"logit\"),\n    prior = \n      prior(normal(0, 1.5), class = \"Intercept\") +\n      prior(normal(0, 0.5), class = \"b\") +\n      prior(exponential(2), class = \"sd\"),\n    data = binom_dta,\n    cores = 2,\n    chains = 2\n  )\n\n\n# Fit model to beta data\n\nbeta_mod <- \n  brm(\n    formula = vote ~ 1 + gdp + (1 | time),\n    family = Beta(link = \"logit\"),\n    prior = \n      prior(normal(0, 1.5), class = \"Intercept\") +\n      prior(normal(0, 0.5), class = \"b\") +\n      prior(exponential(2), class = \"sd\") +\n      prior(gamma(0.01, 0.01), class = \"phi\"),\n    data = beta_dta,\n    cores = 2,\n    chains = 2\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `modelsummary could not extract goodness-of-fit statistics from a model\nof class \"brmsfit\". The package tried a sequence of 2 helper functions:\n\nperformance::model_performance(model)\nbroom::glance(model)\n\nOne of these functions must return a one-row `data.frame`. The `modelsummary` website explains how to summarize unsupported models or add support for new models yourself:\n\nhttps://vincentarelbundock.github.io/modelsummary/articles/modelsummary.html\n\nWarning: `modelsummary could not extract goodness-of-fit statistics from a model\nof class \"brmsfit\". The package tried a sequence of 2 helper functions:\n\nperformance::model_performance(model)\nbroom::glance(model)\n\nOne of these functions must return a one-row `data.frame`. The `modelsummary` website explains how to summarize unsupported models or add support for new models yourself:\n\nhttps://vincentarelbundock.github.io/modelsummary/articles/modelsummary.html\n\nWarning: `modelsummary could not extract goodness-of-fit statistics from a model\nof class \"brmsfit\". The package tried a sequence of 2 helper functions:\n\nperformance::model_performance(model)\nbroom::glance(model)\n\nOne of these functions must return a one-row `data.frame`. The `modelsummary` website explains how to summarize unsupported models or add support for new models yourself:\n\nhttps://vincentarelbundock.github.io/modelsummary/articles/modelsummary.html\n```\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> Bernoulli </th>\n   <th style=\"text-align:center;\"> Binomial </th>\n   <th style=\"text-align:center;\"> Beta </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Intercept </td>\n   <td style=\"text-align:center;\"> 0.002 </td>\n   <td style=\"text-align:center;\"> 0.003 </td>\n   <td style=\"text-align:center;\"> 0.005 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> GDP </td>\n   <td style=\"text-align:center;\"> 0.971 </td>\n   <td style=\"text-align:center;\"> 0.972 </td>\n   <td style=\"text-align:center;\"> 0.966 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}